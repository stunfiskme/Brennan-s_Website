// <auto-generated />
using BrennansWebsite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrennansWebsite.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250120020748_hasedPasswords")]
    partial class hasedPasswords
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BrennansWebsite.Models.BannedCrops", b =>
                {
                    b.Property<int>("bannedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bannedID"));

                    b.Property<string>("CropName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("GardenId")
                        .HasColumnType("int");

                    b.HasKey("bannedID");

                    b.HasIndex("GardenId");

                    b.ToTable("BannedCrops");
                });

            modelBuilder.Entity("BrennansWebsite.Models.ClaimedBy", b =>
                {
                    b.Property<int>("PlotsId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("PlotsId", "Id");

                    b.HasIndex("Id");

                    b.ToTable("ClaimedBys");
                });

            modelBuilder.Entity("BrennansWebsite.Models.CropsGrowing", b =>
                {
                    b.Property<int>("PlotsId")
                        .HasColumnType("int");

                    b.Property<string>("cropName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PublicStatus")
                        .HasColumnType("bit");

                    b.HasKey("PlotsId", "cropName");

                    b.ToTable("CropsGrowing");
                });

            modelBuilder.Entity("BrennansWebsite.Models.Gardener", b =>
                {
                    b.Property<int>("GardenerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GardenerId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("userId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("GardenerId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Gardeners");
                });

            modelBuilder.Entity("BrennansWebsite.Models.Gardens", b =>
                {
                    b.Property<int>("GardenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GardenId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("GardenName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("int");

                    b.HasKey("GardenId");

                    b.HasIndex("LeaderId");

                    b.ToTable("Gardens");
                });

            modelBuilder.Entity("BrennansWebsite.Models.Plots", b =>
                {
                    b.Property<int>("PlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlotId"));

                    b.Property<int>("GardenId")
                        .HasColumnType("int");

                    b.Property<string>("PlotName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PlotId");

                    b.HasIndex("GardenId");

                    b.ToTable("Plots");
                });

            modelBuilder.Entity("BrennansWebsite.Models.UserAccount", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(44)
                        .HasColumnType("nvarchar(44)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("username");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("salt")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varbinary(16)")
                        .HasColumnName("salt");

                    b.HasKey("userId");

                    b.ToTable("userAccount");
                });

            modelBuilder.Entity("BrennansWebsite.Models.BannedCrops", b =>
                {
                    b.HasOne("BrennansWebsite.Models.Gardens", "Gardens")
                        .WithMany()
                        .HasForeignKey("GardenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gardens");
                });

            modelBuilder.Entity("BrennansWebsite.Models.ClaimedBy", b =>
                {
                    b.HasOne("BrennansWebsite.Models.Gardener", "Gardener")
                        .WithMany("ClaimedBy")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrennansWebsite.Models.Plots", "Plots")
                        .WithMany("ClaimedBy")
                        .HasForeignKey("PlotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gardener");

                    b.Navigation("Plots");
                });

            modelBuilder.Entity("BrennansWebsite.Models.CropsGrowing", b =>
                {
                    b.HasOne("BrennansWebsite.Models.Plots", "Plots")
                        .WithMany()
                        .HasForeignKey("PlotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plots");
                });

            modelBuilder.Entity("BrennansWebsite.Models.Gardener", b =>
                {
                    b.HasOne("BrennansWebsite.Models.UserAccount", "UserAccount")
                        .WithOne("Gardener")
                        .HasForeignKey("BrennansWebsite.Models.Gardener", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("BrennansWebsite.Models.Gardens", b =>
                {
                    b.HasOne("BrennansWebsite.Models.Gardener", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("BrennansWebsite.Models.Plots", b =>
                {
                    b.HasOne("BrennansWebsite.Models.Gardens", "Gardens")
                        .WithMany("Plots")
                        .HasForeignKey("GardenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gardens");
                });

            modelBuilder.Entity("BrennansWebsite.Models.Gardener", b =>
                {
                    b.Navigation("ClaimedBy");
                });

            modelBuilder.Entity("BrennansWebsite.Models.Gardens", b =>
                {
                    b.Navigation("Plots");
                });

            modelBuilder.Entity("BrennansWebsite.Models.Plots", b =>
                {
                    b.Navigation("ClaimedBy");
                });

            modelBuilder.Entity("BrennansWebsite.Models.UserAccount", b =>
                {
                    b.Navigation("Gardener")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
